!guard stdmacro

{zero: 0} ; for unconditional jumps, should always be 0
{one: 1}
{n_one: -1}
{n_two: -2}
{max_byte: 0xff}

[ref value name:
	; double curly brackets forces it into the global scope
	{{name: value}}
]

[deref src dest:
	{deref_data: 0 0}
	
	src deref_data >
	deref_data deref_mod >
	dest dest >
	
	deref_mod:
	0 (deref_data + 1) >
	(deref_data + 1) dest >
]

[copy src dest: ; put value at src into dest
	{copy_data: 0}

	src copy_data >
	dest dest >
	copy_data dest >
]

[set src dest: ; copy src into dest
	{set_data: (0 - src)}

	dest dest >
	set_data dest >
]

[copy_branch src dest location: ; put value at src into dest
	{copy_data: 0}

	src copy_data >
	dest dest >
	copy_data dest location
]

[set_branch src dest location: ; copy src into dest
	{set_data: (0 - src)}

	dest dest >
	set_data dest location
]

[jump location:
	zero zero address
]

; destructive
[dequ a b location:	; branch if contents of a and b are equal
	{dequ_data: 0}

	[copy a dequ_data]
	b a macro_skip
	b b end

	macro_skip:

	dequ_data b location

	end:
]

; destructive
[dleq a b location:
	a b location
]

; destructive
[dgeq a b location:
	b a location
]

[equ a b location:
	{equ_data: 0 0}
	[copy a equ_data]
	[copy b (equ_data + 1)]
	
	[dequ equ_data (equ_data + 1) location)
]

[leq a b location:
	{leq_data: 0}
	
	[copy b leq_data]
	[dleq a leq_data location]
]

[geq a b location:
	{geq_data: 0}
	
	[copy b geq_data]
	[dgeq a geq_data location]
]

!endguard
