!guard stdfunc
!include stdmacro.msl

; function overhead
; 22 instructions + 12 instructions per argument
; 84 words + 41 words per argument


; locals_size may be redifined after including, as curly brackets are parsed/put at the end
!define locals_size 16

{stack_pointer: (stack_frame - 1)} ; stack starting point
{stack_frame: 0xfeff} ; [set] stack_frame to appropriate address after including stfunc but before calling any functions 
{return_value: 0} ; where return values are put

; a number or expression preceding a colon jumps to that location
{locals: (($ + locals_size) - 1): 0} ; reserves locals_size * 1 of memory for use as local variables in functions

[push macro_src: ; push src to a stack, treating sp as a stack pointer
	{macro_push_data: 0}

	[deref stack_pointer macro_push_data]
	[set macro_src macro_push_data]
	one macro_sp >
]

[pop dest:
	one macro_sp >

	[deref stack_pointer macro_dest]
]

; to call a function do [prologue], push arguments onto stack in reverse order, then branch to the function
[prologue ret_addr:
	[push stack_frame]
	[push macro_ret_addr]
	[copy stack_frame]
]

; [ret] must be put at the put at the end of each function
[ret:
	{macro_ret_data: 0}

	[copy stack_frame stack_pointer]
	[pop stack_pointer macro_ret_data]
	[pop stack_pointer stack_frame]
	[deref macro_ret_data macro_ret_data]
	[jump macro_ret_data]
]

[get_local index:
	(locals + index)
]

; run to enable a stdlib function
; macro takes the form func_<name>, where <name> is the function name
; then call it with <name>
[enablefunc macro:
	[name]
]
!endguard
